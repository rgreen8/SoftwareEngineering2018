Software Engineering – HW 3 – Reflection 

	Reflecting on the design decisions I made, I think I attempted to normalize information, both in format and in location as much as I could. The large work horse (no pun intended) of my program is done with my Horses HashMap which stored all the horse specific information as well as the distances covered in the race. This made it easy to pull information as needed, as well as reduced the amount of Data Structures present in the Race Class. Also, by using the Strategy style of class set up, there was only needing to create one class for all horses and then have attributes define behavior. When defining the strategy in use, I used a case statement interpreting a string in order to allow for ease of use when defining behavior. When implementing the different strategies, I passed in the start speed and distance covered in order to allow for all computation and logic to be done in a vacuum and to have my main code look as clean as possible. When it came to designing testing, I wanted to look for unique situations which would encourage the program to slip up. The way my program iterates through and updates distance means that there will never be a real tie, allowing the luck horse in the first gate to have an edge by a single step. Putting too many horses in is checked quickly at the start with an if statement and if the speed given are 0 or negative, the program gives all horses the default speed of 20, to avoid any horse holding up the conclusion of the race. 
